package cn.yj.idiomsline.util;

import cn.yj.idiomsline.entity.IdiomEntity;
import cn.yj.idiomsline.repository.IdiomRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 *    接下来怎么开始，系统自己随机取一个成语开始，还是用户输入后开始，先不排除非四字成语
 *    （sql语句的char_length()得到字符串的长度，一个中文一个字符长度；length()是一个utf8中文3个字符长度，gbk中文2个字符长度；）
 *    把成语放进set，取尾字在表中查找，结果集中取一个出来比较是否前面已经出现过（或都列出来），继续循环。
 */
@Component
public class IdiomsPlay {
    @Autowired
    private IdiomRepository idiomRepo;
    /**
     * 只接相同的字，不接同音
     * @param startWord 提供开始的字
     */
    public void startLine(String startWord){
        Set<String> resultSet = new HashSet<String>();
        if(startWord.length()!=1) {
            System.out.println("提供一个汉字即可");
        }else {

            while (true){
                List<IdiomEntity> result = idiomRepo.findByWordS(startWord);//查找
                if(result.isEmpty()) {
                    System.out.println("不存在以"+startWord+"开头的成语");
                    break;
                }else {
                    String idiom = null;
                    int i = 0;
                    while ( i < result.size() ) {
                        idiom = result.get(i).getValue();
                        if( !resultSet.contains(idiom) ) {//从结果集中找出未使用过的成语
                            resultSet.add(idiom);       //添加到set集合中
                            startWord = idiom.substring(idiom.length() - 1);//重设startWord
                            System.out.print(idiom+"--");
                            break;
                        } else {
                            i++;
                        }
                    }
                    if(i>=result.size()) {//结果集中没有未使用过的成语，循环结束
                        break;
                    }

                }
            }
            System.out.println("结束");

        }
    }

//    深度遍历，得出所有可能的结果。得结果集遍历，递归，set要作为参数传下去
//    不用添加根节点。要添加的话，值是最开始的startWord

    /**
     * FAULT 逻辑出错\n
     * // 一条路径的结束条件应该是（1）到叶结点（不存在以*开头的成语）
     * //                     或者（2）子结点全被使用过（以*开头的成语都被用过了）
     *
     * //需要判断是否所有子结点都是使用过的成语，是的话需要输出路径然后把父结点从路径和set中移出去，否则之后其他路径会多出这个结点，判断重复的时候也会多出这个结点
     * //最下面用头个文字判重时就出了严重的错误（还有其他错误）
     * //如A-ABCD-DEFG-GHID-D*** 因为set中已经有了D，所以所有D开头的成语经过判断都不能采用，即路径完成（A-ABCD-DEFG-GHID），可以从set中移除G，路径中移除GHID了。
     * // 但是因为没有实现这个判断，所以按接下来的逻辑，set没有移除掉G，新的路径A-ABCD-DEFG-G* 都不能采用
     * // 又因为set没有移除D，所以A-ABCD-D* 也不行，导致最后只有A开头的路径只有A-ABCD-DEFG-GHID 一条。
     *
     * 递归实现
     * @param startWord
     * @param list
     * @param set
     */
    public void DFSAllLines(String startWord,LinkedList<String> list,Set<String> set){

        List<IdiomEntity> result = idiomRepo.findByWordS(startWord);//取出以指定文字为首的成语
        if(!result.isEmpty()){
            for (IdiomEntity entity: result) {  //遍历成语（遍历子结点）
                String idiom = entity.getValue();
                if(!set.contains(idiom)){   //取未使用过的成语（过滤子结点）
                    set.add(idiom);     //添加进set
                    list.add(idiom);    //添加进路径（接龙）
//                    System.out.print(idiom+"--");
                    DFSAllLines(idiom.substring(idiom.length()-1),list,set);    //递归，深度

                    System.out.println(list.toString()); //递归完，到叶结点（Null）输出路径
                    //把路径中当前子结点移除出去，为下一个子结点做准备。
                    set.remove(idiom);
                    list.removeLast();

//  ------------stack over flow...深度4535...------------------
                }

            }


        }
//        else {
//            System.out.println(list.toString()); //到叶结点（Null）输出路径
//        }

    }
//
//    /**
//     * FAULT 逻辑出错
//     * 非递归实现
//     * @param startWord
//     */
//    public void DFSAllLinesStack(String startWord){
//        LinkedList<String> idioms = getIdiomEntitiesValues(idiomRepo.findByWordS(startWord));
//        if(!idioms.isEmpty()){
//            LinkedList<String> line = new LinkedList<>();//路径
//            LinkedList<String> list = idioms;   //指针指向子结点集合
//            Set<String> set = new HashSet<String>();    //set
//            LinkedList<LinkedList<String>> stack = new LinkedList<>();  //stack记录子结点集合，以便遍历子结点和返回父结点
//            stack.push(idioms);     //先初始化
//            while(!stack.isEmpty()) {   //stack为空时深度遍历结束
//
//                list = stack.peek();    //现在的list不会为空
//                String temp = list.removeFirst();   //取出子结点
//                //若取出子结点后集合空了，说明子结点都访问过了，移出栈
//                if(list.isEmpty()){
//                    stack.pop();
//                }
//                if(!set.contains(temp)){    //若该成语当前路径未使用过
//                    set.add(temp);  //添加进set
//                    line.add(temp); //添加进路径
//
//                    LinkedList tlist = getIdiomEntitiesValues(idiomRepo.findByWordS(temp.substring(temp.length()-1)));  //获取该成语的子结点集合（可接龙的成语集合）
//                    if(tlist.isEmpty()){    //若为空，说明路径到头了，可以输出路径了
//                        System.out.println(line.toString());
//                        //移除
//                        set.remove(temp);
//                        line.removeLast();
//
//                    } else {    //不为空说明还得往下走
//                        stack.push(tlist);  //添加它的子结点集合
//                    }
//
//
//
//                }
//
//            }
//        }
////---------内存使用直线上升，强制关闭-------------
//
//    }
    public LinkedList<String> getIdiomEntitiesValues(List<IdiomEntity> entities) {
        LinkedList<String> list = new LinkedList<String>();
        for (IdiomEntity entity : entities) {
            list.add(entity.getValue());
        }
        return list;
    }

    /**
     * FAULT 逻辑出错
     * 非递归实现\n
     * 不会重复相同的开头文字
     * @param startWord
     */
    public void DFSAllLinesStackNotRestart(String startWord){
        LinkedList<String> idioms = getIdiomEntitiesValues(idiomRepo.findByWordS(startWord));
        if(!idioms.isEmpty()){
            LinkedList<String> line = new LinkedList<>();//路径
            LinkedList<String> list = idioms;   //指针指向子结点集合
            Set<String> set = new HashSet<String>();    //set
            LinkedList<LinkedList<String>> stack = new LinkedList<>();  //stack记录子结点集合，以便遍历子结点和返回父结点
            stack.push(idioms);     //先初始化
            while(!stack.isEmpty()) {   //stack为空时深度遍历结束

                list = stack.peek();    //现在的list不会为空
                String temp = list.removeFirst();   //取出子结点
                //若取出子结点后集合空了，说明子结点都访问过了，移出栈
                if(list.isEmpty()){
                    stack.pop();
                }
                String s = temp.substring(0,1);
                if(!set.contains(s)){    //若该成语的开头文字当前路径未使用过
                    set.add(s);  //添加进set
                    line.add(temp); //添加进路径

                    LinkedList tlist = getIdiomEntitiesValues(idiomRepo.findByWordS(temp.substring(temp.length()-1)));  //获取该成语的子结点集合（可接龙的成语集合）
                    if(tlist.isEmpty()){    //若为空，说明路径到头了，可以输出路径了
                        System.out.println(line.toString());
                        //移除
                        set.remove(s);
                        line.removeLast();

                    } else {    //不为空说明还得往下走
                        stack.push(tlist);  //添加它的子结点集合
                    }



                }

            }
        }

    }
}
